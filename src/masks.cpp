#pragma once
#include <map>
#include "cboard.h"
#include "inlines.h"

using namespace std;

namespace masks {

// Increments square by a delta and returns true if that square is still on the
// board.
bool wrapIter(int *square, int delta) {
  *square += delta;
  // Check for overflowing on the top or bottom of the board
  bool wrapped = *square < 0 || *square >= 64;
  // Check for overflowing on the right
  wrapped |= (*square % 8 == 0) && ((16 + delta) % 8 == 1);
  // Check for overflowing on the left
  wrapped |= (*square % 8 == 7) && ((16 + delta) % 8 == 7);
  return !wrapped;
}

BB promoRank(bool color) {
  return color ? (BB)0xFF00000000000000 : (BB)0x00000000000000FF;
}

BB const RANK[8] = {0x00000000000000FF, 0x000000000000FF00, 0x0000000000FF0000,
                    0x00000000FF000000, 0x000000FF00000000, 0x0000FF0000000000,
                    0x00FF000000000000, 0xFF00000000000000};

BB const FILE[8] = {0x0101010101010101, 0x0202020202020202, 0x0404040404040404,
                    0x0808080808080808, 0x1010101010101010, 0x2020202020202020,
                    0x4040404040404040, 0x8080808080808080};

// Knight moves[i] 0 0 0 0 0 0 0 0 King moves[i] 0 0 0 0 0 0 0 0
//                 0 0 0 1 0 1 0 0               0 0 1 1 1 0 0 0
//                 0 0 1 0 0 0 1 0               0 0 1 i 1 0 0 0
//                 0 0 0 0 i 0 0 0               0 0 1 1 1 0 0 0
//                 0 0 1 0 0 0 1 0               0 0 0 0 0 0 0 0
//                 0 0 0 1 0 1 0 0               0 0 0 0 0 0 0 0
//                 0 0 0 0 0 0 0 0               0 0 0 0 0 0 0 0
//                 0 0 0 0 0 0 0 0               0 0 0 0 0 0 0 0

BB const KNIGHT_MOVES[64] = {
    0x0000000000020400, 0x0000000000050800, 0x00000000000a1100,
    0x0000000000142200, 0x0000000000284400, 0x0000000000508800,
    0x0000000000a01000, 0x0000000000402000, 0x0000000002040004,
    0x0000000005080008, 0x000000000a110011, 0x0000000014220022,
    0x0000000028440044, 0x0000000050880088, 0x00000000a0100010,
    0x0000000040200020, 0x0000000204000402, 0x0000000508000805,
    0x0000000a1100110a, 0x0000001422002214, 0x0000002844004428,
    0x0000005088008850, 0x000000a0100010a0, 0x0000004020002040,
    0x0000020400040200, 0x0000050800080500, 0x00000a1100110a00,
    0x0000142200221400, 0x0000284400442800, 0x0000508800885000,
    0x0000a0100010a000, 0x0000402000204000, 0x0002040004020000,
    0x0005080008050000, 0x000a1100110a0000, 0x0014220022140000,
    0x0028440044280000, 0x0050880088500000, 0x00a0100010a00000,
    0x0040200020400000, 0x0204000402000000, 0x0508000805000000,
    0x0a1100110a000000, 0x1422002214000000, 0x2844004428000000,
    0x5088008850000000, 0xa0100010a0000000, 0x4020002040000000,
    0x0400040200000000, 0x0800080500000000, 0x1100110a00000000,
    0x2200221400000000, 0x4400442800000000, 0x8800885000000000,
    0x100010a000000000, 0x2000204000000000, 0x0004020000000000,
    0x0008050000000000, 0x00110a0000000000, 0x0022140000000000,
    0x0044280000000000, 0x0088500000000000, 0x0010a00000000000,
    0x0020400000000000};

BB const KING_MOVES[64] = {
    0x0000000000000302, 0x0000000000000705, 0x0000000000000e0a,
    0x0000000000001c14, 0x0000000000003828, 0x0000000000007050,
    0x000000000000e0a0, 0x000000000000c040, 0x0000000000030203,
    0x0000000000070507, 0x00000000000e0a0e, 0x00000000001c141c,
    0x0000000000382838, 0x0000000000705070, 0x0000000000e0a0e0,
    0x0000000000c040c0, 0x0000000003020300, 0x0000000007050700,
    0x000000000e0a0e00, 0x000000001c141c00, 0x0000000038283800,
    0x0000000070507000, 0x00000000e0a0e000, 0x00000000c040c000,
    0x0000000302030000, 0x0000000705070000, 0x0000000e0a0e0000,
    0x0000001c141c0000, 0x0000003828380000, 0x0000007050700000,
    0x000000e0a0e00000, 0x000000c040c00000, 0x0000030203000000,
    0x0000070507000000, 0x00000e0a0e000000, 0x00001c141c000000,
    0x0000382838000000, 0x0000705070000000, 0x0000e0a0e0000000,
    0x0000c040c0000000, 0x0003020300000000, 0x0007050700000000,
    0x000e0a0e00000000, 0x001c141c00000000, 0x0038283800000000,
    0x0070507000000000, 0x00e0a0e000000000, 0x00c040c000000000,
    0x0302030000000000, 0x0705070000000000, 0x0e0a0e0000000000,
    0x1c141c0000000000, 0x3828380000000000, 0x7050700000000000,
    0xe0a0e00000000000, 0xc040c00000000000, 0x0203000000000000,
    0x0507000000000000, 0x0a0e000000000000, 0x141c000000000000,
    0x2838000000000000, 0x5070000000000000, 0xa0e0000000000000,
    0x40c0000000000000};

// Bishop masks[i] 0 0 0 0 0 0 0 0 Rook masks[i] i 1 1 1 1 1 1 0
//                 0 0 1 0 1 0 0 0               1 0 0 0 0 0 0 0
//                 0 0 0 i 0 0 0 0               1 0 0 0 0 0 0 0
//                 0 0 1 0 1 0 0 0               1 0 0 0 0 0 0 0
//                 0 1 0 0 0 1 0 0               1 0 0 0 0 0 0 0
//                 0 0 0 0 0 0 1 0               1 0 0 0 0 0 0 0
//                 0 0 0 0 0 0 0 0               1 0 0 0 0 0 0 0
//                 0 0 0 0 0 0 0 0               0 0 0 0 0 0 0 0

BB const BISHOP_MASKS[64] = {
    0x0040201008040200, 0x0000402010080400, 0x0000004020100a00,
    0x0000000040221400, 0x0000000002442800, 0x0000000204085000,
    0x0000020408102000, 0x0002040810204000, 0x0020100804020000,
    0x0040201008040000, 0x00004020100a0000, 0x0000004022140000,
    0x0000000244280000, 0x0000020408500000, 0x0002040810200000,
    0x0004081020400000, 0x0010080402000200, 0x0020100804000400,
    0x004020100a000a00, 0x0000402214001400, 0x0000024428002800,
    0x0002040850005000, 0x0004081020002000, 0x0008102040004000,
    0x0008040200020400, 0x0010080400040800, 0x0020100a000a1000,
    0x0040221400142200, 0x0002442800284400, 0x0004085000500800,
    0x0008102000201000, 0x0010204000402000, 0x0004020002040800,
    0x0008040004081000, 0x00100a000a102000, 0x0022140014224000,
    0x0044280028440200, 0x0008500050080400, 0x0010200020100800,
    0x0020400040201000, 0x0002000204081000, 0x0004000408102000,
    0x000a000a10204000, 0x0014001422400000, 0x0028002844020000,
    0x0050005008040200, 0x0020002010080400, 0x0040004020100800,
    0x0000020408102000, 0x0000040810204000, 0x00000a1020400000,
    0x0000142240000000, 0x0000284402000000, 0x0000500804020000,
    0x0000201008040200, 0x0000402010080400, 0x0002040810204000,
    0x0004081020400000, 0x000a102040000000, 0x0014224000000000,
    0x0028440200000000, 0x0050080402000000, 0x0020100804020000,
    0x0040201008040200};

BB const ROOK_MASKS[64] = {
    0x000101010101017e, 0x000202020202027c, 0x000404040404047a,
    0x0008080808080876, 0x001010101010106e, 0x002020202020205e,
    0x004040404040403e, 0x008080808080807e, 0x0001010101017e00,
    0x0002020202027c00, 0x0004040404047a00, 0x0008080808087600,
    0x0010101010106e00, 0x0020202020205e00, 0x0040404040403e00,
    0x0080808080807e00, 0x00010101017e0100, 0x00020202027c0200,
    0x00040404047a0400, 0x0008080808760800, 0x00101010106e1000,
    0x00202020205e2000, 0x00404040403e4000, 0x00808080807e8000,
    0x000101017e010100, 0x000202027c020200, 0x000404047a040400,
    0x0008080876080800, 0x001010106e101000, 0x002020205e202000,
    0x004040403e404000, 0x008080807e808000, 0x0001017e01010100,
    0x0002027c02020200, 0x0004047a04040400, 0x0008087608080800,
    0x0010106e10101000, 0x0020205e20202000, 0x0040403e40404000,
    0x0080807e80808000, 0x00017e0101010100, 0x00027c0202020200,
    0x00047a0404040400, 0x0008760808080800, 0x00106e1010101000,
    0x00205e2020202000, 0x00403e4040404000, 0x00807e8080808000,
    0x007e010101010100, 0x007c020202020200, 0x007a040404040400,
    0x0076080808080800, 0x006e101010101000, 0x005e202020202000,
    0x003e404040404000, 0x007e808080808000, 0x7e01010101010100,
    0x7c02020202020200, 0x7a04040404040400, 0x7608080808080800,
    0x6e10101010101000, 0x5e20202020202000, 0x3e40404040404000,
    0x7e80808080808000};

// Interceding[i][j] 0 0 0 0 0 0 0 0 Opposite[i][j] 0 0 0 0 0 0 0 0
//                   0 i 0 0 0 0 0 0                0 i 0 0 0 0 0 0
//                   0 0 1 0 0 0 0 0                0 0 0 0 0 0 0 0
//                   0 0 0 1 0 0 0 0                0 0 0 0 0 0 0 0
//                   0 0 0 0 j 0 0 0                0 0 0 0 j 0 0 0
//                   0 0 0 0 0 0 0 0                0 0 0 0 0 1 0 0
//                   0 0 0 0 0 0 0 0                0 0 0 0 0 0 1 0
//                   0 0 0 0 0 0 0 0                0 0 0 0 0 0 0 1

BB INTERCEDING[64][64] = {0};
BB OPPOSITE[64][64] = {0};

void generateInterceding() {
  int deltas[8] = {-1, -7, -8, -9, 1, 9, 8, 7};
  for (ind source = 0; source < 64; source++) {
    for (ind direction = 0; direction < 8; direction++) {
      int dest = source;
      BB interceding = 0;
      while (wrapIter(&dest, deltas[direction])) {
        INTERCEDING[source][dest] = interceding;
        interceding |= exp_2(dest);
      }
    }
  }
}

void generateOpposite() {
  int deltas[8] = {-1, -7, -8, -9, 1, 9, 8, 7};
  for (ind dest = 0; dest < 64; dest++) {
    for (ind direction = 0; direction < 8; direction++) {
      BB opposite = 0;

      // Set the "opposite" bits
      int t = dest;
      while (wrapIter(&t, -deltas[direction])) {
        opposite |= exp_2(t);
      }

      // Fill OPPOSITE with this bitmap for each source square.
      int source = dest;
      while (wrapIter(&source, deltas[direction])) {
        OPPOSITE[source][dest] = opposite;
      }
    }
    OPPOSITE[dest][dest] = 0;
  }
}

// pawnChecks[WHITE][i] 0 0 0 0 0 0 0 0 pawnChecks[BLACK][j] 0 0 0 0 0 0 0 0
//                      0 i 0 0 0 0 0 0                      0 0 0 0 0 0 0 0
//                      1 0 1 0 0 0 0 0                      0 0 0 0 0 0 1 0
//                      0 0 0 0 0 0 0 0                      0 0 0 0 0 0 0 j
//                      0 0 0 0 0 0 0 0                      0 0 0 0 0 0 0 0
//                      0 0 0 0 0 0 0 0                      0 0 0 0 0 0 0 0
//                      0 0 0 0 0 0 0 0                      0 0 0 0 0 0 0 0
//                      0 0 0 0 0 0 0 0                      0 0 0 0 0 0 0 0

BB PAWN_CHECKS[2][64] = {0};

void generatePawnChecks() {
  for (int i = 0; i < 64; i++) {
    BB square = exp_2(i);
    PAWN_CHECKS[WHITE][i] =
        ((square & ~FILE[0]) << 7) | ((square & ~FILE[7]) << 9);
    PAWN_CHECKS[BLACK][i] =
        ((square & ~FILE[0]) >> 9) | ((square & ~FILE[7]) >> 7);
  }
}

// Initialize dynamically set mask tables.
void init() {
  generateInterceding();
  generateOpposite();
  generatePawnChecks();
}
};
